// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/sharing"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SharingUpdate is the builder for updating Sharing entities.
type SharingUpdate struct {
	config
	hooks    []Hook
	mutation *SharingMutation
}

// Where appends a list predicates to the SharingUpdate builder.
func (su *SharingUpdate) Where(ps ...predicate.Sharing) *SharingUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SharingUpdate) SetUserID(i int) *SharingUpdate {
	su.mutation.ResetUserID()
	su.mutation.SetUserID(i)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SharingUpdate) SetNillableUserID(i *int) *SharingUpdate {
	if i != nil {
		su.SetUserID(*i)
	}
	return su
}

// AddUserID adds i to the "user_id" field.
func (su *SharingUpdate) AddUserID(i int) *SharingUpdate {
	su.mutation.AddUserID(i)
	return su
}

// SetSharedWithUserID sets the "shared_with_user_id" field.
func (su *SharingUpdate) SetSharedWithUserID(s string) *SharingUpdate {
	su.mutation.SetSharedWithUserID(s)
	return su
}

// SetNillableSharedWithUserID sets the "shared_with_user_id" field if the given value is not nil.
func (su *SharingUpdate) SetNillableSharedWithUserID(s *string) *SharingUpdate {
	if s != nil {
		su.SetSharedWithUserID(*s)
	}
	return su
}

// SetTaskID sets the "task_id" field.
func (su *SharingUpdate) SetTaskID(s string) *SharingUpdate {
	su.mutation.SetTaskID(s)
	return su
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (su *SharingUpdate) SetNillableTaskID(s *string) *SharingUpdate {
	if s != nil {
		su.SetTaskID(*s)
	}
	return su
}

// SetProjectID sets the "project_id" field.
func (su *SharingUpdate) SetProjectID(s string) *SharingUpdate {
	su.mutation.SetProjectID(s)
	return su
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (su *SharingUpdate) SetNillableProjectID(s *string) *SharingUpdate {
	if s != nil {
		su.SetProjectID(*s)
	}
	return su
}

// SetPermissionLevel sets the "permission_level" field.
func (su *SharingUpdate) SetPermissionLevel(s string) *SharingUpdate {
	su.mutation.SetPermissionLevel(s)
	return su
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (su *SharingUpdate) SetNillablePermissionLevel(s *string) *SharingUpdate {
	if s != nil {
		su.SetPermissionLevel(*s)
	}
	return su
}

// AddUserOwnerIDs adds the "userOwner" edge to the User entity by IDs.
func (su *SharingUpdate) AddUserOwnerIDs(ids ...int) *SharingUpdate {
	su.mutation.AddUserOwnerIDs(ids...)
	return su
}

// AddUserOwner adds the "userOwner" edges to the User entity.
func (su *SharingUpdate) AddUserOwner(u ...*User) *SharingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserOwnerIDs(ids...)
}

// Mutation returns the SharingMutation object of the builder.
func (su *SharingUpdate) Mutation() *SharingMutation {
	return su.mutation
}

// ClearUserOwner clears all "userOwner" edges to the User entity.
func (su *SharingUpdate) ClearUserOwner() *SharingUpdate {
	su.mutation.ClearUserOwner()
	return su
}

// RemoveUserOwnerIDs removes the "userOwner" edge to User entities by IDs.
func (su *SharingUpdate) RemoveUserOwnerIDs(ids ...int) *SharingUpdate {
	su.mutation.RemoveUserOwnerIDs(ids...)
	return su
}

// RemoveUserOwner removes "userOwner" edges to User entities.
func (su *SharingUpdate) RemoveUserOwner(u ...*User) *SharingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SharingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SharingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SharingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SharingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SharingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sharing.Table, sharing.Columns, sqlgraph.NewFieldSpec(sharing.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(sharing.FieldUserID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedUserID(); ok {
		_spec.AddField(sharing.FieldUserID, field.TypeInt, value)
	}
	if value, ok := su.mutation.SharedWithUserID(); ok {
		_spec.SetField(sharing.FieldSharedWithUserID, field.TypeString, value)
	}
	if value, ok := su.mutation.TaskID(); ok {
		_spec.SetField(sharing.FieldTaskID, field.TypeString, value)
	}
	if value, ok := su.mutation.ProjectID(); ok {
		_spec.SetField(sharing.FieldProjectID, field.TypeString, value)
	}
	if value, ok := su.mutation.PermissionLevel(); ok {
		_spec.SetField(sharing.FieldPermissionLevel, field.TypeString, value)
	}
	if su.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUserOwnerIDs(); len(nodes) > 0 && !su.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sharing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SharingUpdateOne is the builder for updating a single Sharing entity.
type SharingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SharingMutation
}

// SetUserID sets the "user_id" field.
func (suo *SharingUpdateOne) SetUserID(i int) *SharingUpdateOne {
	suo.mutation.ResetUserID()
	suo.mutation.SetUserID(i)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SharingUpdateOne) SetNillableUserID(i *int) *SharingUpdateOne {
	if i != nil {
		suo.SetUserID(*i)
	}
	return suo
}

// AddUserID adds i to the "user_id" field.
func (suo *SharingUpdateOne) AddUserID(i int) *SharingUpdateOne {
	suo.mutation.AddUserID(i)
	return suo
}

// SetSharedWithUserID sets the "shared_with_user_id" field.
func (suo *SharingUpdateOne) SetSharedWithUserID(s string) *SharingUpdateOne {
	suo.mutation.SetSharedWithUserID(s)
	return suo
}

// SetNillableSharedWithUserID sets the "shared_with_user_id" field if the given value is not nil.
func (suo *SharingUpdateOne) SetNillableSharedWithUserID(s *string) *SharingUpdateOne {
	if s != nil {
		suo.SetSharedWithUserID(*s)
	}
	return suo
}

// SetTaskID sets the "task_id" field.
func (suo *SharingUpdateOne) SetTaskID(s string) *SharingUpdateOne {
	suo.mutation.SetTaskID(s)
	return suo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (suo *SharingUpdateOne) SetNillableTaskID(s *string) *SharingUpdateOne {
	if s != nil {
		suo.SetTaskID(*s)
	}
	return suo
}

// SetProjectID sets the "project_id" field.
func (suo *SharingUpdateOne) SetProjectID(s string) *SharingUpdateOne {
	suo.mutation.SetProjectID(s)
	return suo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (suo *SharingUpdateOne) SetNillableProjectID(s *string) *SharingUpdateOne {
	if s != nil {
		suo.SetProjectID(*s)
	}
	return suo
}

// SetPermissionLevel sets the "permission_level" field.
func (suo *SharingUpdateOne) SetPermissionLevel(s string) *SharingUpdateOne {
	suo.mutation.SetPermissionLevel(s)
	return suo
}

// SetNillablePermissionLevel sets the "permission_level" field if the given value is not nil.
func (suo *SharingUpdateOne) SetNillablePermissionLevel(s *string) *SharingUpdateOne {
	if s != nil {
		suo.SetPermissionLevel(*s)
	}
	return suo
}

// AddUserOwnerIDs adds the "userOwner" edge to the User entity by IDs.
func (suo *SharingUpdateOne) AddUserOwnerIDs(ids ...int) *SharingUpdateOne {
	suo.mutation.AddUserOwnerIDs(ids...)
	return suo
}

// AddUserOwner adds the "userOwner" edges to the User entity.
func (suo *SharingUpdateOne) AddUserOwner(u ...*User) *SharingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserOwnerIDs(ids...)
}

// Mutation returns the SharingMutation object of the builder.
func (suo *SharingUpdateOne) Mutation() *SharingMutation {
	return suo.mutation
}

// ClearUserOwner clears all "userOwner" edges to the User entity.
func (suo *SharingUpdateOne) ClearUserOwner() *SharingUpdateOne {
	suo.mutation.ClearUserOwner()
	return suo
}

// RemoveUserOwnerIDs removes the "userOwner" edge to User entities by IDs.
func (suo *SharingUpdateOne) RemoveUserOwnerIDs(ids ...int) *SharingUpdateOne {
	suo.mutation.RemoveUserOwnerIDs(ids...)
	return suo
}

// RemoveUserOwner removes "userOwner" edges to User entities.
func (suo *SharingUpdateOne) RemoveUserOwner(u ...*User) *SharingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserOwnerIDs(ids...)
}

// Where appends a list predicates to the SharingUpdate builder.
func (suo *SharingUpdateOne) Where(ps ...predicate.Sharing) *SharingUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SharingUpdateOne) Select(field string, fields ...string) *SharingUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sharing entity.
func (suo *SharingUpdateOne) Save(ctx context.Context) (*Sharing, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SharingUpdateOne) SaveX(ctx context.Context) *Sharing {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SharingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SharingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SharingUpdateOne) sqlSave(ctx context.Context) (_node *Sharing, err error) {
	_spec := sqlgraph.NewUpdateSpec(sharing.Table, sharing.Columns, sqlgraph.NewFieldSpec(sharing.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sharing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sharing.FieldID)
		for _, f := range fields {
			if !sharing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sharing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(sharing.FieldUserID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedUserID(); ok {
		_spec.AddField(sharing.FieldUserID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.SharedWithUserID(); ok {
		_spec.SetField(sharing.FieldSharedWithUserID, field.TypeString, value)
	}
	if value, ok := suo.mutation.TaskID(); ok {
		_spec.SetField(sharing.FieldTaskID, field.TypeString, value)
	}
	if value, ok := suo.mutation.ProjectID(); ok {
		_spec.SetField(sharing.FieldProjectID, field.TypeString, value)
	}
	if value, ok := suo.mutation.PermissionLevel(); ok {
		_spec.SetField(sharing.FieldPermissionLevel, field.TypeString, value)
	}
	if suo.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUserOwnerIDs(); len(nodes) > 0 && !suo.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sharing{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sharing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
