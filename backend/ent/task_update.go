// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/category"
	"backend/ent/comment"
	"backend/ent/predicate"
	"backend/ent/project"
	"backend/ent/task"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetDueDate sets the "due_date" field.
func (tu *TaskUpdate) SetDueDate(t time.Time) *TaskUpdate {
	tu.mutation.SetDueDate(t)
	return tu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDueDate(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDueDate(*t)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(s string) *TaskUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(s *string) *TaskUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// SetPiority sets the "piority" field.
func (tu *TaskUpdate) SetPiority(s string) *TaskUpdate {
	tu.mutation.SetPiority(s)
	return tu
}

// SetNillablePiority sets the "piority" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePiority(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPiority(*s)
	}
	return tu
}

// SetTags sets the "tags" field.
func (tu *TaskUpdate) SetTags(s string) *TaskUpdate {
	tu.mutation.SetTags(s)
	return tu
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTags(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTags(*s)
	}
	return tu
}

// SetProjectID sets the "project_id" field.
func (tu *TaskUpdate) SetProjectID(s string) *TaskUpdate {
	tu.mutation.SetProjectID(s)
	return tu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableProjectID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetProjectID(*s)
	}
	return tu
}

// SetCategoryID sets the "category_id" field.
func (tu *TaskUpdate) SetCategoryID(s string) *TaskUpdate {
	tu.mutation.SetCategoryID(s)
	return tu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCategoryID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCategoryID(*s)
	}
	return tu
}

// SetComments sets the "comments" field.
func (tu *TaskUpdate) SetComments(s string) *TaskUpdate {
	tu.mutation.SetComments(s)
	return tu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableComments(s *string) *TaskUpdate {
	if s != nil {
		tu.SetComments(*s)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdateAt sets the "update_at" field.
func (tu *TaskUpdate) SetUpdateAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdateAt(t)
	return tu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdateAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetUpdateAt(*t)
	}
	return tu
}

// SetUserOwnerID sets the "userOwner" edge to the User entity by ID.
func (tu *TaskUpdate) SetUserOwnerID(id int) *TaskUpdate {
	tu.mutation.SetUserOwnerID(id)
	return tu
}

// SetNillableUserOwnerID sets the "userOwner" edge to the User entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableUserOwnerID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetUserOwnerID(*id)
	}
	return tu
}

// SetUserOwner sets the "userOwner" edge to the User entity.
func (tu *TaskUpdate) SetUserOwner(u *User) *TaskUpdate {
	return tu.SetUserOwnerID(u.ID)
}

// SetProjectOwnerID sets the "projectOwner" edge to the Project entity by ID.
func (tu *TaskUpdate) SetProjectOwnerID(id int) *TaskUpdate {
	tu.mutation.SetProjectOwnerID(id)
	return tu
}

// SetNillableProjectOwnerID sets the "projectOwner" edge to the Project entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableProjectOwnerID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetProjectOwnerID(*id)
	}
	return tu
}

// SetProjectOwner sets the "projectOwner" edge to the Project entity.
func (tu *TaskUpdate) SetProjectOwner(p *Project) *TaskUpdate {
	return tu.SetProjectOwnerID(p.ID)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (tu *TaskUpdate) AddCommentIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddCommentIDs(ids...)
	return tu
}

// AddComment adds the "comment" edges to the Comment entity.
func (tu *TaskUpdate) AddComment(c ...*Comment) *TaskUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCommentIDs(ids...)
}

// SetCategoryOwnerID sets the "categoryOwner" edge to the Category entity by ID.
func (tu *TaskUpdate) SetCategoryOwnerID(id int) *TaskUpdate {
	tu.mutation.SetCategoryOwnerID(id)
	return tu
}

// SetNillableCategoryOwnerID sets the "categoryOwner" edge to the Category entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableCategoryOwnerID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetCategoryOwnerID(*id)
	}
	return tu
}

// SetCategoryOwner sets the "categoryOwner" edge to the Category entity.
func (tu *TaskUpdate) SetCategoryOwner(c *Category) *TaskUpdate {
	return tu.SetCategoryOwnerID(c.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearUserOwner clears the "userOwner" edge to the User entity.
func (tu *TaskUpdate) ClearUserOwner() *TaskUpdate {
	tu.mutation.ClearUserOwner()
	return tu
}

// ClearProjectOwner clears the "projectOwner" edge to the Project entity.
func (tu *TaskUpdate) ClearProjectOwner() *TaskUpdate {
	tu.mutation.ClearProjectOwner()
	return tu
}

// ClearComment clears all "comment" edges to the Comment entity.
func (tu *TaskUpdate) ClearComment() *TaskUpdate {
	tu.mutation.ClearComment()
	return tu
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (tu *TaskUpdate) RemoveCommentIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveCommentIDs(ids...)
	return tu
}

// RemoveComment removes "comment" edges to Comment entities.
func (tu *TaskUpdate) RemoveComment(c ...*Comment) *TaskUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCommentIDs(ids...)
}

// ClearCategoryOwner clears the "categoryOwner" edge to the Category entity.
func (tu *TaskUpdate) ClearCategoryOwner() *TaskUpdate {
	tu.mutation.ClearCategoryOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.DueDate(); ok {
		_spec.SetField(task.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.Piority(); ok {
		_spec.SetField(task.FieldPiority, field.TypeString, value)
	}
	if value, ok := tu.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeString, value)
	}
	if value, ok := tu.mutation.ProjectID(); ok {
		_spec.SetField(task.FieldProjectID, field.TypeString, value)
	}
	if value, ok := tu.mutation.CategoryID(); ok {
		_spec.SetField(task.FieldCategoryID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Comments(); ok {
		_spec.SetField(task.FieldComments, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdateAt(); ok {
		_spec.SetField(task.FieldUpdateAt, field.TypeTime, value)
	}
	if tu.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserOwnerTable,
			Columns: []string{task.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserOwnerTable,
			Columns: []string{task.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProjectOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectOwnerTable,
			Columns: []string{task.ProjectOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectOwnerTable,
			Columns: []string{task.ProjectOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentTable,
			Columns: []string{task.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCommentIDs(); len(nodes) > 0 && !tu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentTable,
			Columns: []string{task.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentTable,
			Columns: []string{task.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CategoryOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CategoryOwnerTable,
			Columns: []string{task.CategoryOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CategoryOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CategoryOwnerTable,
			Columns: []string{task.CategoryOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetDueDate sets the "due_date" field.
func (tuo *TaskUpdateOne) SetDueDate(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDueDate(t)
	return tuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDueDate(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDueDate(*t)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(s string) *TaskUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// SetPiority sets the "piority" field.
func (tuo *TaskUpdateOne) SetPiority(s string) *TaskUpdateOne {
	tuo.mutation.SetPiority(s)
	return tuo
}

// SetNillablePiority sets the "piority" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePiority(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPiority(*s)
	}
	return tuo
}

// SetTags sets the "tags" field.
func (tuo *TaskUpdateOne) SetTags(s string) *TaskUpdateOne {
	tuo.mutation.SetTags(s)
	return tuo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTags(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTags(*s)
	}
	return tuo
}

// SetProjectID sets the "project_id" field.
func (tuo *TaskUpdateOne) SetProjectID(s string) *TaskUpdateOne {
	tuo.mutation.SetProjectID(s)
	return tuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProjectID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetProjectID(*s)
	}
	return tuo
}

// SetCategoryID sets the "category_id" field.
func (tuo *TaskUpdateOne) SetCategoryID(s string) *TaskUpdateOne {
	tuo.mutation.SetCategoryID(s)
	return tuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCategoryID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCategoryID(*s)
	}
	return tuo
}

// SetComments sets the "comments" field.
func (tuo *TaskUpdateOne) SetComments(s string) *TaskUpdateOne {
	tuo.mutation.SetComments(s)
	return tuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableComments(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetComments(*s)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdateAt sets the "update_at" field.
func (tuo *TaskUpdateOne) SetUpdateAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdateAt(t)
	return tuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdateAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetUpdateAt(*t)
	}
	return tuo
}

// SetUserOwnerID sets the "userOwner" edge to the User entity by ID.
func (tuo *TaskUpdateOne) SetUserOwnerID(id int) *TaskUpdateOne {
	tuo.mutation.SetUserOwnerID(id)
	return tuo
}

// SetNillableUserOwnerID sets the "userOwner" edge to the User entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUserOwnerID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetUserOwnerID(*id)
	}
	return tuo
}

// SetUserOwner sets the "userOwner" edge to the User entity.
func (tuo *TaskUpdateOne) SetUserOwner(u *User) *TaskUpdateOne {
	return tuo.SetUserOwnerID(u.ID)
}

// SetProjectOwnerID sets the "projectOwner" edge to the Project entity by ID.
func (tuo *TaskUpdateOne) SetProjectOwnerID(id int) *TaskUpdateOne {
	tuo.mutation.SetProjectOwnerID(id)
	return tuo
}

// SetNillableProjectOwnerID sets the "projectOwner" edge to the Project entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProjectOwnerID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetProjectOwnerID(*id)
	}
	return tuo
}

// SetProjectOwner sets the "projectOwner" edge to the Project entity.
func (tuo *TaskUpdateOne) SetProjectOwner(p *Project) *TaskUpdateOne {
	return tuo.SetProjectOwnerID(p.ID)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (tuo *TaskUpdateOne) AddCommentIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddCommentIDs(ids...)
	return tuo
}

// AddComment adds the "comment" edges to the Comment entity.
func (tuo *TaskUpdateOne) AddComment(c ...*Comment) *TaskUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCommentIDs(ids...)
}

// SetCategoryOwnerID sets the "categoryOwner" edge to the Category entity by ID.
func (tuo *TaskUpdateOne) SetCategoryOwnerID(id int) *TaskUpdateOne {
	tuo.mutation.SetCategoryOwnerID(id)
	return tuo
}

// SetNillableCategoryOwnerID sets the "categoryOwner" edge to the Category entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCategoryOwnerID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetCategoryOwnerID(*id)
	}
	return tuo
}

// SetCategoryOwner sets the "categoryOwner" edge to the Category entity.
func (tuo *TaskUpdateOne) SetCategoryOwner(c *Category) *TaskUpdateOne {
	return tuo.SetCategoryOwnerID(c.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearUserOwner clears the "userOwner" edge to the User entity.
func (tuo *TaskUpdateOne) ClearUserOwner() *TaskUpdateOne {
	tuo.mutation.ClearUserOwner()
	return tuo
}

// ClearProjectOwner clears the "projectOwner" edge to the Project entity.
func (tuo *TaskUpdateOne) ClearProjectOwner() *TaskUpdateOne {
	tuo.mutation.ClearProjectOwner()
	return tuo
}

// ClearComment clears all "comment" edges to the Comment entity.
func (tuo *TaskUpdateOne) ClearComment() *TaskUpdateOne {
	tuo.mutation.ClearComment()
	return tuo
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (tuo *TaskUpdateOne) RemoveCommentIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveCommentIDs(ids...)
	return tuo
}

// RemoveComment removes "comment" edges to Comment entities.
func (tuo *TaskUpdateOne) RemoveComment(c ...*Comment) *TaskUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCommentIDs(ids...)
}

// ClearCategoryOwner clears the "categoryOwner" edge to the Category entity.
func (tuo *TaskUpdateOne) ClearCategoryOwner() *TaskUpdateOne {
	tuo.mutation.ClearCategoryOwner()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DueDate(); ok {
		_spec.SetField(task.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Piority(); ok {
		_spec.SetField(task.FieldPiority, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ProjectID(); ok {
		_spec.SetField(task.FieldProjectID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CategoryID(); ok {
		_spec.SetField(task.FieldCategoryID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Comments(); ok {
		_spec.SetField(task.FieldComments, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdateAt(); ok {
		_spec.SetField(task.FieldUpdateAt, field.TypeTime, value)
	}
	if tuo.mutation.UserOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserOwnerTable,
			Columns: []string{task.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.UserOwnerTable,
			Columns: []string{task.UserOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProjectOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectOwnerTable,
			Columns: []string{task.ProjectOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectOwnerTable,
			Columns: []string{task.ProjectOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentTable,
			Columns: []string{task.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCommentIDs(); len(nodes) > 0 && !tuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentTable,
			Columns: []string{task.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentTable,
			Columns: []string{task.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CategoryOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CategoryOwnerTable,
			Columns: []string{task.CategoryOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CategoryOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CategoryOwnerTable,
			Columns: []string{task.CategoryOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
