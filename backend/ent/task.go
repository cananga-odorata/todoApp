// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/category"
	"backend/ent/project"
	"backend/ent/task"
	"backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Piority holds the value of the "piority" field.
	Piority string `json:"piority,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID string `json:"project_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID string `json:"category_id,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	_Category_id *int
	_Project_id  *int
	_User_id     *int
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// UserOwner holds the value of the userOwner edge.
	UserOwner *User `json:"userOwner,omitempty"`
	// ProjectOwner holds the value of the projectOwner edge.
	ProjectOwner *Project `json:"projectOwner,omitempty"`
	// Comment holds the value of the comment edge.
	Comment []*Comment `json:"comment,omitempty"`
	// CategoryOwner holds the value of the categoryOwner edge.
	CategoryOwner *Category `json:"categoryOwner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOwnerOrErr returns the UserOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) UserOwnerOrErr() (*User, error) {
	if e.UserOwner != nil {
		return e.UserOwner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "userOwner"}
}

// ProjectOwnerOrErr returns the ProjectOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) ProjectOwnerOrErr() (*Project, error) {
	if e.ProjectOwner != nil {
		return e.ProjectOwner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "projectOwner"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) CommentOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// CategoryOwnerOrErr returns the CategoryOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) CategoryOwnerOrErr() (*Category, error) {
	if e.CategoryOwner != nil {
		return e.CategoryOwner, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "categoryOwner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			values[i] = new(sql.NullInt64)
		case task.FieldTitle, task.FieldDescription, task.FieldStatus, task.FieldPiority, task.FieldTags, task.FieldProjectID, task.FieldCategoryID, task.FieldComments:
			values[i] = new(sql.NullString)
		case task.FieldDueDate, task.FieldCreatedAt, task.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		case task.ForeignKeys[0]: // _Category_id
			values[i] = new(sql.NullInt64)
		case task.ForeignKeys[1]: // _Project_id
			values[i] = new(sql.NullInt64)
		case task.ForeignKeys[2]: // _User_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case task.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				t.DueDate = value.Time
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case task.FieldPiority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field piority", values[i])
			} else if value.Valid {
				t.Piority = value.String
			}
		case task.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				t.Tags = value.String
			}
		case task.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				t.ProjectID = value.String
			}
		case task.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				t.CategoryID = value.String
			}
		case task.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				t.Comments = value.String
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				t.UpdateAt = value.Time
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Category_id", value)
			} else if value.Valid {
				t._Category_id = new(int)
				*t._Category_id = int(value.Int64)
			}
		case task.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Project_id", value)
			} else if value.Valid {
				t._Project_id = new(int)
				*t._Project_id = int(value.Int64)
			}
		case task.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _User_id", value)
			} else if value.Valid {
				t._User_id = new(int)
				*t._User_id = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUserOwner queries the "userOwner" edge of the Task entity.
func (t *Task) QueryUserOwner() *UserQuery {
	return NewTaskClient(t.config).QueryUserOwner(t)
}

// QueryProjectOwner queries the "projectOwner" edge of the Task entity.
func (t *Task) QueryProjectOwner() *ProjectQuery {
	return NewTaskClient(t.config).QueryProjectOwner(t)
}

// QueryComment queries the "comment" edge of the Task entity.
func (t *Task) QueryComment() *CommentQuery {
	return NewTaskClient(t.config).QueryComment(t)
}

// QueryCategoryOwner queries the "categoryOwner" edge of the Task entity.
func (t *Task) QueryCategoryOwner() *CategoryQuery {
	return NewTaskClient(t.config).QueryCategoryOwner(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(t.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("piority=")
	builder.WriteString(t.Piority)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(t.Tags)
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(t.ProjectID)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(t.CategoryID)
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(t.Comments)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(t.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
