// Code generated by ent, DO NOT EDIT.

package sharing

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sharing type in the database.
	Label = "sharing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldSharedWithUserID holds the string denoting the shared_with_user_id field in the database.
	FieldSharedWithUserID = "shared_with_user_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldPermissionLevel holds the string denoting the permission_level field in the database.
	FieldPermissionLevel = "permission_level"
	// EdgeUserOwner holds the string denoting the userowner edge name in mutations.
	EdgeUserOwner = "userOwner"
	// Table holds the table name of the sharing in the database.
	Table = "sharings"
	// UserOwnerTable is the table that holds the userOwner relation/edge. The primary key declared below.
	UserOwnerTable = "user_sharing"
	// UserOwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserOwnerInverseTable = "users"
)

// Columns holds all SQL columns for sharing fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldSharedWithUserID,
	FieldTaskID,
	FieldProjectID,
	FieldPermissionLevel,
}

var (
	// UserOwnerPrimaryKey and UserOwnerColumn2 are the table columns denoting the
	// primary key for the userOwner relation (M2M).
	UserOwnerPrimaryKey = []string{"User_id", "Sharing_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Sharing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// BySharedWithUserID orders the results by the shared_with_user_id field.
func BySharedWithUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSharedWithUserID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByPermissionLevel orders the results by the permission_level field.
func ByPermissionLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionLevel, opts...).ToFunc()
}

// ByUserOwnerCount orders the results by userOwner count.
func ByUserOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserOwnerStep(), opts...)
	}
}

// ByUserOwner orders the results by userOwner terms.
func ByUserOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserOwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserOwnerTable, UserOwnerPrimaryKey...),
	)
}
