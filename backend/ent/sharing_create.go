// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/sharing"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SharingCreate is the builder for creating a Sharing entity.
type SharingCreate struct {
	config
	mutation *SharingMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *SharingCreate) SetUserID(i int) *SharingCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetSharedWithUserID sets the "shared_with_user_id" field.
func (sc *SharingCreate) SetSharedWithUserID(s string) *SharingCreate {
	sc.mutation.SetSharedWithUserID(s)
	return sc
}

// SetTaskID sets the "task_id" field.
func (sc *SharingCreate) SetTaskID(s string) *SharingCreate {
	sc.mutation.SetTaskID(s)
	return sc
}

// SetProjectID sets the "project_id" field.
func (sc *SharingCreate) SetProjectID(s string) *SharingCreate {
	sc.mutation.SetProjectID(s)
	return sc
}

// SetPermissionLevel sets the "permission_level" field.
func (sc *SharingCreate) SetPermissionLevel(s string) *SharingCreate {
	sc.mutation.SetPermissionLevel(s)
	return sc
}

// AddUserOwnerIDs adds the "userOwner" edge to the User entity by IDs.
func (sc *SharingCreate) AddUserOwnerIDs(ids ...int) *SharingCreate {
	sc.mutation.AddUserOwnerIDs(ids...)
	return sc
}

// AddUserOwner adds the "userOwner" edges to the User entity.
func (sc *SharingCreate) AddUserOwner(u ...*User) *SharingCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddUserOwnerIDs(ids...)
}

// Mutation returns the SharingMutation object of the builder.
func (sc *SharingCreate) Mutation() *SharingMutation {
	return sc.mutation
}

// Save creates the Sharing in the database.
func (sc *SharingCreate) Save(ctx context.Context) (*Sharing, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SharingCreate) SaveX(ctx context.Context) *Sharing {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SharingCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SharingCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SharingCreate) check() error {
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Sharing.user_id"`)}
	}
	if _, ok := sc.mutation.SharedWithUserID(); !ok {
		return &ValidationError{Name: "shared_with_user_id", err: errors.New(`ent: missing required field "Sharing.shared_with_user_id"`)}
	}
	if _, ok := sc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "Sharing.task_id"`)}
	}
	if _, ok := sc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "Sharing.project_id"`)}
	}
	if _, ok := sc.mutation.PermissionLevel(); !ok {
		return &ValidationError{Name: "permission_level", err: errors.New(`ent: missing required field "Sharing.permission_level"`)}
	}
	return nil
}

func (sc *SharingCreate) sqlSave(ctx context.Context) (*Sharing, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SharingCreate) createSpec() (*Sharing, *sqlgraph.CreateSpec) {
	var (
		_node = &Sharing{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sharing.Table, sqlgraph.NewFieldSpec(sharing.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(sharing.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.SharedWithUserID(); ok {
		_spec.SetField(sharing.FieldSharedWithUserID, field.TypeString, value)
		_node.SharedWithUserID = value
	}
	if value, ok := sc.mutation.TaskID(); ok {
		_spec.SetField(sharing.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := sc.mutation.ProjectID(); ok {
		_spec.SetField(sharing.FieldProjectID, field.TypeString, value)
		_node.ProjectID = value
	}
	if value, ok := sc.mutation.PermissionLevel(); ok {
		_spec.SetField(sharing.FieldPermissionLevel, field.TypeString, value)
		_node.PermissionLevel = value
	}
	if nodes := sc.mutation.UserOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sharing.UserOwnerTable,
			Columns: sharing.UserOwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SharingCreateBulk is the builder for creating many Sharing entities in bulk.
type SharingCreateBulk struct {
	config
	err      error
	builders []*SharingCreate
}

// Save creates the Sharing entities in the database.
func (scb *SharingCreateBulk) Save(ctx context.Context) ([]*Sharing, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sharing, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SharingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SharingCreateBulk) SaveX(ctx context.Context) []*Sharing {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SharingCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SharingCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
