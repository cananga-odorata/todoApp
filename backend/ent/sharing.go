// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/sharing"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sharing is the model entity for the Sharing schema.
type Sharing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// SharedWithUserID holds the value of the "shared_with_user_id" field.
	SharedWithUserID string `json:"shared_with_user_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID string `json:"task_id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID string `json:"project_id,omitempty"`
	// PermissionLevel holds the value of the "permission_level" field.
	PermissionLevel string `json:"permission_level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SharingQuery when eager-loading is set.
	Edges        SharingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SharingEdges holds the relations/edges for other nodes in the graph.
type SharingEdges struct {
	// UserOwner holds the value of the userOwner edge.
	UserOwner []*User `json:"userOwner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOwnerOrErr returns the UserOwner value or an error if the edge
// was not loaded in eager-loading.
func (e SharingEdges) UserOwnerOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UserOwner, nil
	}
	return nil, &NotLoadedError{edge: "userOwner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sharing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sharing.FieldID, sharing.FieldUserID:
			values[i] = new(sql.NullInt64)
		case sharing.FieldSharedWithUserID, sharing.FieldTaskID, sharing.FieldProjectID, sharing.FieldPermissionLevel:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sharing fields.
func (s *Sharing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sharing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sharing.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = int(value.Int64)
			}
		case sharing.FieldSharedWithUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shared_with_user_id", values[i])
			} else if value.Valid {
				s.SharedWithUserID = value.String
			}
		case sharing.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				s.TaskID = value.String
			}
		case sharing.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				s.ProjectID = value.String
			}
		case sharing.FieldPermissionLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission_level", values[i])
			} else if value.Valid {
				s.PermissionLevel = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sharing.
// This includes values selected through modifiers, order, etc.
func (s *Sharing) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUserOwner queries the "userOwner" edge of the Sharing entity.
func (s *Sharing) QueryUserOwner() *UserQuery {
	return NewSharingClient(s.config).QueryUserOwner(s)
}

// Update returns a builder for updating this Sharing.
// Note that you need to call Sharing.Unwrap() before calling this method if this Sharing
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sharing) Update() *SharingUpdateOne {
	return NewSharingClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sharing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sharing) Unwrap() *Sharing {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sharing is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sharing) String() string {
	var builder strings.Builder
	builder.WriteString("Sharing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("shared_with_user_id=")
	builder.WriteString(s.SharedWithUserID)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(s.TaskID)
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(s.ProjectID)
	builder.WriteString(", ")
	builder.WriteString("permission_level=")
	builder.WriteString(s.PermissionLevel)
	builder.WriteByte(')')
	return builder.String()
}

// Sharings is a parsable slice of Sharing.
type Sharings []*Sharing
