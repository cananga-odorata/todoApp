// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthenticationsColumns holds the columns for the "authentications" table.
	AuthenticationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "session_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "login_time", Type: field.TypeTime},
		{Name: "logout_time", Type: field.TypeTime},
		{Name: "User_id", Type: field.TypeInt, Nullable: true},
	}
	// AuthenticationsTable holds the schema information for the "authentications" table.
	AuthenticationsTable = &schema.Table{
		Name:       "authentications",
		Columns:    AuthenticationsColumns,
		PrimaryKey: []*schema.Column{AuthenticationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "authentications_users_authentication",
				Columns:    []*schema.Column{AuthenticationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "task_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "content", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "Task_id", Type: field.TypeInt, Nullable: true},
		{Name: "User_id", Type: field.TypeInt, Nullable: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_tasks_comment",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_users_comment",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "task_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "method", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "User_id", Type: field.TypeInt, Nullable: true},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_users_notification",
				Columns:    []*schema.Column{NotificationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// ReportsColumns holds the columns for the "reports" table.
	ReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "content", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "User_id", Type: field.TypeInt, Nullable: true},
	}
	// ReportsTable holds the schema information for the "reports" table.
	ReportsTable = &schema.Table{
		Name:       "reports",
		Columns:    ReportsColumns,
		PrimaryKey: []*schema.Column{ReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reports_users_report",
				Columns:    []*schema.Column{ReportsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SettingsColumns holds the columns for the "settings" table.
	SettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "login_time", Type: field.TypeTime},
		{Name: "logout_time", Type: field.TypeTime},
		{Name: "User_id", Type: field.TypeInt},
	}
	// SettingsTable holds the schema information for the "settings" table.
	SettingsTable = &schema.Table{
		Name:       "settings",
		Columns:    SettingsColumns,
		PrimaryKey: []*schema.Column{SettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "settings_users_settings",
				Columns:    []*schema.Column{SettingsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SharingsColumns holds the columns for the "sharings" table.
	SharingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "shared_with_user_id", Type: field.TypeString},
		{Name: "task_id", Type: field.TypeString},
		{Name: "project_id", Type: field.TypeString},
		{Name: "permission_level", Type: field.TypeString},
	}
	// SharingsTable holds the schema information for the "sharings" table.
	SharingsTable = &schema.Table{
		Name:       "sharings",
		Columns:    SharingsColumns,
		PrimaryKey: []*schema.Column{SharingsColumns[0]},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "due_date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeString},
		{Name: "piority", Type: field.TypeString},
		{Name: "tags", Type: field.TypeString},
		{Name: "project_id", Type: field.TypeString},
		{Name: "category_id", Type: field.TypeString},
		{Name: "comments", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "update_at", Type: field.TypeTime},
		{Name: "Category_id", Type: field.TypeInt, Nullable: true},
		{Name: "Project_id", Type: field.TypeInt, Nullable: true},
		{Name: "User_id", Type: field.TypeInt, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_categories_task",
				Columns:    []*schema.Column{TasksColumns[12]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_projects_task",
				Columns:    []*schema.Column{TasksColumns[13]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_users_task",
				Columns:    []*schema.Column{TasksColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Size: 255},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserSharingColumns holds the columns for the "user_sharing" table.
	UserSharingColumns = []*schema.Column{
		{Name: "User_id", Type: field.TypeInt},
		{Name: "Sharing_id", Type: field.TypeInt},
	}
	// UserSharingTable holds the schema information for the "user_sharing" table.
	UserSharingTable = &schema.Table{
		Name:       "user_sharing",
		Columns:    UserSharingColumns,
		PrimaryKey: []*schema.Column{UserSharingColumns[0], UserSharingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_sharing_User_id",
				Columns:    []*schema.Column{UserSharingColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_sharing_Sharing_id",
				Columns:    []*schema.Column{UserSharingColumns[1]},
				RefColumns: []*schema.Column{SharingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserProjectColumns holds the columns for the "user_project" table.
	UserProjectColumns = []*schema.Column{
		{Name: "User_id", Type: field.TypeInt},
		{Name: "Project_id", Type: field.TypeInt},
	}
	// UserProjectTable holds the schema information for the "user_project" table.
	UserProjectTable = &schema.Table{
		Name:       "user_project",
		Columns:    UserProjectColumns,
		PrimaryKey: []*schema.Column{UserProjectColumns[0], UserProjectColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_project_User_id",
				Columns:    []*schema.Column{UserProjectColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_project_Project_id",
				Columns:    []*schema.Column{UserProjectColumns[1]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthenticationsTable,
		CategoriesTable,
		CommentsTable,
		NotificationsTable,
		ProjectsTable,
		ReportsTable,
		SettingsTable,
		SharingsTable,
		TasksTable,
		UsersTable,
		UserSharingTable,
		UserProjectTable,
	}
)

func init() {
	AuthenticationsTable.ForeignKeys[0].RefTable = UsersTable
	CommentsTable.ForeignKeys[0].RefTable = TasksTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	NotificationsTable.ForeignKeys[0].RefTable = UsersTable
	ReportsTable.ForeignKeys[0].RefTable = UsersTable
	SettingsTable.ForeignKeys[0].RefTable = UsersTable
	TasksTable.ForeignKeys[0].RefTable = CategoriesTable
	TasksTable.ForeignKeys[1].RefTable = ProjectsTable
	TasksTable.ForeignKeys[2].RefTable = UsersTable
	UserSharingTable.ForeignKeys[0].RefTable = UsersTable
	UserSharingTable.ForeignKeys[1].RefTable = SharingsTable
	UserProjectTable.ForeignKeys[0].RefTable = UsersTable
	UserProjectTable.ForeignKeys[1].RefTable = ProjectsTable
}
