// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/authentication"
	"backend/ent/category"
	"backend/ent/comment"
	"backend/ent/project"
	"backend/ent/report"
	"backend/ent/schema"
	"backend/ent/settings"
	"backend/ent/task"
	"backend/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authenticationFields := schema.Authentication{}.Fields()
	_ = authenticationFields
	// authenticationDescSessionID is the schema descriptor for session_id field.
	authenticationDescSessionID := authenticationFields[0].Descriptor()
	// authentication.SessionIDValidator is a validator for the "session_id" field. It is called by the builders before save.
	authentication.SessionIDValidator = authenticationDescSessionID.Validators[0].(func(string) error)
	// authenticationDescLoginTime is the schema descriptor for login_time field.
	authenticationDescLoginTime := authenticationFields[2].Descriptor()
	// authentication.DefaultLoginTime holds the default value on creation for the login_time field.
	authentication.DefaultLoginTime = authenticationDescLoginTime.Default.(func() time.Time)
	// authenticationDescLogoutTime is the schema descriptor for logout_time field.
	authenticationDescLogoutTime := authenticationFields[3].Descriptor()
	// authentication.DefaultLogoutTime holds the default value on creation for the logout_time field.
	authentication.DefaultLogoutTime = authenticationDescLogoutTime.Default.(func() time.Time)
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = categoryDescName.Validators[0].(func(string) error)
	// categoryDescCreatedAt is the schema descriptor for created_at field.
	categoryDescCreatedAt := categoryFields[1].Descriptor()
	// category.DefaultCreatedAt holds the default value on creation for the created_at field.
	category.DefaultCreatedAt = categoryDescCreatedAt.Default.(func() time.Time)
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescTaskID is the schema descriptor for task_id field.
	commentDescTaskID := commentFields[0].Descriptor()
	// comment.TaskIDValidator is a validator for the "task_id" field. It is called by the builders before save.
	comment.TaskIDValidator = commentDescTaskID.Validators[0].(func(string) error)
	// commentDescContent is the schema descriptor for content field.
	commentDescContent := commentFields[2].Descriptor()
	// comment.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	comment.ContentValidator = commentDescContent.Validators[0].(func(string) error)
	// commentDescCreatedAt is the schema descriptor for created_at field.
	commentDescCreatedAt := commentFields[3].Descriptor()
	// comment.DefaultCreatedAt holds the default value on creation for the created_at field.
	comment.DefaultCreatedAt = commentDescCreatedAt.Default.(func() time.Time)
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectFields[0].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = projectDescName.Validators[0].(func(string) error)
	reportFields := schema.Report{}.Fields()
	_ = reportFields
	// reportDescContent is the schema descriptor for content field.
	reportDescContent := reportFields[1].Descriptor()
	// report.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	report.ContentValidator = reportDescContent.Validators[0].(func(string) error)
	// reportDescCreatedAt is the schema descriptor for created_at field.
	reportDescCreatedAt := reportFields[2].Descriptor()
	// report.DefaultCreatedAt holds the default value on creation for the created_at field.
	report.DefaultCreatedAt = reportDescCreatedAt.Default.(func() time.Time)
	settingsFields := schema.Settings{}.Fields()
	_ = settingsFields
	// settingsDescLoginTime is the schema descriptor for login_time field.
	settingsDescLoginTime := settingsFields[1].Descriptor()
	// settings.DefaultLoginTime holds the default value on creation for the login_time field.
	settings.DefaultLoginTime = settingsDescLoginTime.Default.(func() time.Time)
	// settingsDescLogoutTime is the schema descriptor for logout_time field.
	settingsDescLogoutTime := settingsFields[2].Descriptor()
	// settings.DefaultLogoutTime holds the default value on creation for the logout_time field.
	settings.DefaultLogoutTime = settingsDescLogoutTime.Default.(func() time.Time)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescTitle is the schema descriptor for title field.
	taskDescTitle := taskFields[0].Descriptor()
	// task.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	task.TitleValidator = taskDescTitle.Validators[0].(func(string) error)
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskFields[9].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[3].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
