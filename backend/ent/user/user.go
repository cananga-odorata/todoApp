// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// EdgeReport holds the string denoting the report edge name in mutations.
	EdgeReport = "report"
	// EdgeSettings holds the string denoting the settings edge name in mutations.
	EdgeSettings = "settings"
	// EdgeAuthentication holds the string denoting the authentication edge name in mutations.
	EdgeAuthentication = "authentication"
	// EdgeSharing holds the string denoting the sharing edge name in mutations.
	EdgeSharing = "sharing"
	// EdgeNotification holds the string denoting the notification edge name in mutations.
	EdgeNotification = "notification"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "tasks"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "User_id"
	// CommentTable is the table that holds the comment relation/edge.
	CommentTable = "comments"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "User_id"
	// ReportTable is the table that holds the report relation/edge.
	ReportTable = "reports"
	// ReportInverseTable is the table name for the Report entity.
	// It exists in this package in order to avoid circular dependency with the "report" package.
	ReportInverseTable = "reports"
	// ReportColumn is the table column denoting the report relation/edge.
	ReportColumn = "User_id"
	// SettingsTable is the table that holds the settings relation/edge.
	SettingsTable = "settings"
	// SettingsInverseTable is the table name for the Settings entity.
	// It exists in this package in order to avoid circular dependency with the "settings" package.
	SettingsInverseTable = "settings"
	// SettingsColumn is the table column denoting the settings relation/edge.
	SettingsColumn = "User_id"
	// AuthenticationTable is the table that holds the authentication relation/edge.
	AuthenticationTable = "authentications"
	// AuthenticationInverseTable is the table name for the Authentication entity.
	// It exists in this package in order to avoid circular dependency with the "authentication" package.
	AuthenticationInverseTable = "authentications"
	// AuthenticationColumn is the table column denoting the authentication relation/edge.
	AuthenticationColumn = "User_id"
	// SharingTable is the table that holds the sharing relation/edge. The primary key declared below.
	SharingTable = "user_sharing"
	// SharingInverseTable is the table name for the Sharing entity.
	// It exists in this package in order to avoid circular dependency with the "sharing" package.
	SharingInverseTable = "sharings"
	// NotificationTable is the table that holds the notification relation/edge.
	NotificationTable = "notifications"
	// NotificationInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationInverseTable = "notifications"
	// NotificationColumn is the table column denoting the notification relation/edge.
	NotificationColumn = "User_id"
	// ProjectTable is the table that holds the project relation/edge. The primary key declared below.
	ProjectTable = "user_project"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldPassword,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// SharingPrimaryKey and SharingColumn2 are the table columns denoting the
	// primary key for the sharing relation (M2M).
	SharingPrimaryKey = []string{"User_id", "Sharing_id"}
	// ProjectPrimaryKey and ProjectColumn2 are the table columns denoting the
	// primary key for the project relation (M2M).
	ProjectPrimaryKey = []string{"User_id", "Project_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskCount orders the results by task count.
func ByTaskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskStep(), opts...)
	}
}

// ByTask orders the results by task terms.
func ByTask(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentCount orders the results by comment count.
func ByCommentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentStep(), opts...)
	}
}

// ByComment orders the results by comment terms.
func ByComment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReportCount orders the results by report count.
func ByReportCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReportStep(), opts...)
	}
}

// ByReport orders the results by report terms.
func ByReport(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySettingsCount orders the results by settings count.
func BySettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSettingsStep(), opts...)
	}
}

// BySettings orders the results by settings terms.
func BySettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthenticationCount orders the results by authentication count.
func ByAuthenticationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthenticationStep(), opts...)
	}
}

// ByAuthentication orders the results by authentication terms.
func ByAuthentication(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthenticationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySharingCount orders the results by sharing count.
func BySharingCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSharingStep(), opts...)
	}
}

// BySharing orders the results by sharing terms.
func BySharing(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSharingStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationCount orders the results by notification count.
func ByNotificationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationStep(), opts...)
	}
}

// ByNotification orders the results by notification terms.
func ByNotification(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProjectCount orders the results by project count.
func ByProjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectStep(), opts...)
	}
}

// ByProject orders the results by project terms.
func ByProject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskTable, TaskColumn),
	)
}
func newCommentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentTable, CommentColumn),
	)
}
func newReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReportTable, ReportColumn),
	)
}
func newSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SettingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SettingsTable, SettingsColumn),
	)
}
func newAuthenticationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthenticationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthenticationTable, AuthenticationColumn),
	)
}
func newSharingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SharingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SharingTable, SharingPrimaryKey...),
	)
}
func newNotificationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationTable, NotificationColumn),
	)
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProjectTable, ProjectPrimaryKey...),
	)
}
